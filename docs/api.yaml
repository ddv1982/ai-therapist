openapi: 3.0.3
info:
  title: AI Therapist API
  description: |
    A comprehensive API for a therapeutic AI chat application that provides compassionate mental health support through AI conversation.
    
    ## Features
    - Real-time streaming chat responses
    - Session management for conversation continuity
    - Professional report generation and email delivery
    - Comprehensive validation and error handling
    - Mobile-optimized responsive design
    
    ## Security
    - CORS protection
    - Input validation with Zod schemas
    - Rate limiting considerations
    - Secure API key handling
    
    ## Authentication
    Currently, the API uses API keys for Groq service authentication. In a production environment, 
    additional authentication layers would be implemented.
  version: 1.0.0
  contact:
    name: AI Therapist Support
    email: support@ai-therapist.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://your-domain.com/api
    description: Production server

paths:
  /chat:
    post:
      summary: Send chat message and receive streaming AI response
      description: |
        Sends a user message to the AI therapist and receives a streaming response.
        The response is delivered as Server-Sent Events (SSE) for real-time interaction.
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              simple_message:
                summary: Simple message
                value:
                  messages:
                    - role: user
                      content: "I'm feeling anxious about work"
                  apiKey: "your-groq-api-key"
                  model: "openai/gpt-oss-120b"
                  temperature: 0.7
                  maxTokens: 2000
                  topP: 0.9
      responses:
        200:
          description: Streaming chat response
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-sent events stream containing chat response chunks
              examples:
                streaming_response:
                  summary: Streaming response format
                  value: |
                    data: {"choices":[{"delta":{"content":"I understand you're feeling anxious about work. "}}]}
                    
                    data: {"choices":[{"delta":{"content":"That's a very common experience. "}}]}
                    
                    data: [DONE]
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /sessions:
    get:
      summary: Retrieve all chat sessions
      description: Gets a list of all chat sessions with message counts and metadata
      tags:
        - Sessions
      responses:
        200:
          description: List of sessions
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        500:
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new chat session
      description: Creates a new therapeutic chat session with a specified title
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
            examples:
              new_session:
                summary: Create new session
                value:
                  title: "Anxiety Management Session"
      responses:
        200:
          description: Created session
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /sessions/{sessionId}:
    delete:
      summary: Delete a chat session
      description: Permanently deletes a chat session and all associated messages
      tags:
        - Sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the session to delete
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Session deleted successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Session deleted successfully"
        404:
          description: Session not found
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          $ref: '#/components/responses/InternalServerError'

  /sessions/{sessionId}/messages:
    get:
      summary: List messages for a session
      description: Retrieves messages for the specified session with pagination
      tags:
        - Messages
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the session
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number (default 1)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Page size (default 50, max 100)
      responses:
        200:
          description: Paginated list of messages
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          limit:
                            type: integer
                          total:
                            type: integer
                          totalPages:
                            type: integer
                          hasNext:
                            type: boolean
                          hasPrev:
                            type: boolean
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Save a message to a session
      description: Saves a user or assistant message to the specified session
      tags:
        - Messages
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
            examples:
              user_message:
                summary: User message
                value:
                  role: user
                  content: "I'm feeling anxious about work"
              assistant_message:
                summary: Assistant message
                value:
                  role: assistant
                  content: "I hear you. Let's explore that together."
                  modelUsed: "openai/gpt-oss-20b"
      responses:
        200:
          description: Message saved successfully
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /reports:
    post:
      summary: Generate session report
      description: |
        Generates a therapeutic analysis report for a completed session using AI.
        The report includes key insights, patterns, and recommendations.
      tags:
        - Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sessionId
                - messages
              properties:
                sessionId:
                  type: string
                  format: uuid
                  description: UUID of the session
                messages:
                  type: array
                  items:
                    $ref: '#/components/schemas/Message'
                  description: Array of messages from the session
            examples:
              report_request:
                summary: Generate report
                value:
                  sessionId: "123e4567-e89b-12d3-a456-426614174000"
                  messages:
                    - role: user
                      content: "I've been feeling overwhelmed lately"
                      sessionId: "123e4567-e89b-12d3-a456-426614174000"
                    - role: assistant
                      content: "I hear that you're feeling overwhelmed..."
                      sessionId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Generated report
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionReport'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /reports/send:
    post:
      summary: Generate and email session report
      description: |
        Generates a therapeutic session report and sends it via email in HTML format.
        Supports multiple email service configurations including SMTP and console logging.
      tags:
        - Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailReportRequest'
            examples:
              smtp_email:
                summary: Send via SMTP
                value:
                  sessionId: "123e4567-e89b-12d3-a456-426614174000"
                  emailAddress: "user@example.com"
                  messages:
                    - role: user
                      content: "I need help with anxiety"
                      sessionId: "123e4567-e89b-12d3-a456-426614174000"
                  emailConfig:
                    service: "smtp"
                    smtpHost: "smtp.gmail.com"
                    smtpUser: "your-email@gmail.com"
                    smtpPass: "your-app-password"
                    fromEmail: "therapist@example.com"
              console_log:
                summary: Console logging (testing)
                value:
                  sessionId: "123e4567-e89b-12d3-a456-426614174000"
                  emailAddress: "test@example.com"
                  messages:
                    - role: user
                      content: "Test message"
                      sessionId: "123e4567-e89b-12d3-a456-426614174000"
                  emailConfig:
                    service: "console"
      responses:
        200:
          description: Report sent successfully
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Report generated and sent successfully"
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /models:
    get:
      summary: Get available AI models
      description: |
        Retrieves a list of available AI models from the Groq API with their specifications,
        token limits, and categorization (featured, production, preview).
      tags:
        - Models
      responses:
        200:
          description: List of available models
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelConfig'
              examples:
                model_list:
                  summary: Available models
                  value:
                    models:
                      - id: "openai/gpt-oss-120b"
                        name: "GPT OSS 120B"
                        provider: "OpenAI"
                        maxTokens: 32000
                        category: "featured"
                      - id: "llama-3.1-8b-instant"
                        name: "Llama 3.1 8B Instant"
                        provider: "Meta"
                        maxTokens: 32000
                        category: "production"
        500:
          $ref: '#/components/responses/InternalServerError'

  /env:
    get:
      summary: Check environment configuration
      description: |
        Checks if required environment variables are configured, particularly
        the Groq API key. Used by the frontend to determine UI behavior.
      tags:
        - Environment
      responses:
        200:
          description: Environment status
          headers:
            X-Request-Id:
              description: Correlation ID for tracing this request
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasGroqApiKey:
                    type: boolean
                    description: Whether GROQ_API_KEY environment variable is set
                    example: true
              examples:
                env_configured:
                  summary: Environment configured
                  value:
                    hasGroqApiKey: true
                env_not_configured:
                  summary: Manual API key needed
                  value:
                    hasGroqApiKey: false

components:
  headers:
    X-Request-Id:
      description: Correlation ID for tracing this request
      schema:
        type: string
  schemas:
    Message:
      type: object
      required:
        - role
        - content
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the message
          example: "msg-123e4567-e89b-12d3-a456-426614174000"
        role:
          type: string
          enum: [user, assistant]
          description: The role of the message sender
        content:
          type: string
          minLength: 1
          maxLength: 50000
          description: The message content
          example: "I'm struggling with anxiety and need some guidance"
        timestamp:
          type: string
          format: date-time
          description: When the message was created
        createdAt:
          type: string
          format: date-time
          description: Database creation timestamp

    NewMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          description: The role of the message sender
        content:
          type: string
          minLength: 1
          maxLength: 50000
          description: The message content
        modelUsed:
          type: string
          maxLength: 100
          description: Optional model identifier used for assistant messages

    Session:
      type: object
      required:
        - id
        - title
        - userId
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique session identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          description: User identifier (currently uses default user)
          example: "default-user-id"
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Human-readable session title
          example: "Managing Work Stress"
        status:
          type: string
          enum: [active, completed]
          description: Current session status
        startedAt:
          type: string
          format: date-time
          description: When the session was started
        endedAt:
          type: string
          format: date-time
          nullable: true
          description: When the session was completed
        createdAt:
          type: string
          format: date-time
          description: Database creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Database update timestamp
        _count:
          type: object
          properties:
            messages:
              type: integer
              description: Number of messages in this session
              example: 12

    SessionReport:
      type: object
      required:
        - id
        - sessionId
        - therapeuticInsights
      properties:
        id:
          type: string
          format: uuid
          description: Unique report identifier
        sessionId:
          type: string
          format: uuid
          description: Associated session ID
        keyPoints:
          type: string
          description: JSON string of key discussion points
        therapeuticInsights:
          type: string
          description: AI-generated therapeutic analysis
        patternsIdentified:
          type: string
          description: JSON string of identified behavioral patterns
        actionItems:
          type: string
          description: JSON string of recommended actions
        moodAssessment:
          type: string
          nullable: true
          description: Overall mood assessment
        progressNotes:
          type: string
          nullable: true
          description: Progress tracking notes
        createdAt:
          type: string
          format: date-time
          description: Report generation timestamp

    ModelConfig:
      type: object
      required:
        - id
        - name
        - provider
        - maxTokens
        - category
      properties:
        id:
          type: string
          description: Model identifier used in API calls
          example: "openai/gpt-oss-120b"
        name:
          type: string
          description: Human-readable model name
          example: "GPT OSS 120B"
        provider:
          type: string
          description: Model provider/company
          example: "OpenAI"
        maxTokens:
          type: integer
          minimum: 256
          maximum: 131072
          description: Maximum tokens supported by the model
          example: 32000
        category:
          type: string
          enum: [featured, production, preview]
          description: Model category/stability level
          example: "featured"

    ChatRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum: [user, assistant]
              content:
                type: string
          description: Array of conversation messages
        sessionId:
          type: string
          format: uuid
          description: Optional session ID for context
        model:
          type: string
          description: AI model to use
          example: "openai/gpt-oss-120b"
        apiKey:
          type: string
          description: Groq API key (if not set in environment)
        temperature:
          type: number
          minimum: 0
          maximum: 2
          description: Response creativity (0=focused, 2=creative)
          example: 0.7
        maxTokens:
          type: integer
          minimum: 256
          maximum: 131072
          description: Maximum response length
          example: 2000
        topP:
          type: number
          minimum: 0.1
          maximum: 1.0
          description: Nucleus sampling parameter
          example: 0.9

    CreateSessionRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Session title
          example: "Managing Anxiety and Stress"

    EmailReportRequest:
      type: object
      required:
        - sessionId
        - messages
        - emailAddress
      properties:
        sessionId:
          type: string
          format: uuid
          description: Session to generate report for
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          minItems: 1
          description: Session messages
        emailAddress:
          type: string
          format: email
          maxLength: 254
          description: Recipient email address
          example: "user@example.com"
        model:
          type: string
          description: AI model for report generation
          example: "openai/gpt-oss-120b"
        emailConfig:
          type: object
          properties:
            service:
              type: string
              enum: [console, smtp]
              description: Email service type
            smtpHost:
              type: string
              description: SMTP server hostname
              example: "smtp.gmail.com"
            smtpUser:
              type: string
              format: email
              description: SMTP username
            smtpPass:
              type: string
              description: SMTP password or app password
            fromEmail:
              type: string
              format: email
              description: Sender email address

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Validation failed"
        details:
          type: string
          description: Detailed error information
          example: "Invalid email address format"
        code:
          type: string
          description: Error code for programmatic handling
          example: "VALIDATION_ERROR"
        suggestedAction:
          type: string
          description: Suggested action to resolve the error
          example: "Please check your input and try again"

  responses:
    BadRequest:
      description: Bad request - invalid input
      headers:
        X-Request-Id:
          description: Correlation ID for tracing this request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            validation_error:
              summary: Validation error
              value:
                error: "Invalid request data"
                details: "emailAddress: Invalid email address format"
                code: "VALIDATION_ERROR"
            missing_field:
              summary: Missing required field
              value:
                error: "Missing required field"
                details: "Session ID is required"
                code: "MISSING_FIELD"

    InternalServerError:
      description: Internal server error
      headers:
        X-Request-Id:
          description: Correlation ID for tracing this request
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            server_error:
              summary: Generic server error
              value:
                error: "Internal server error"
                details: "An unexpected error occurred"
                code: "INTERNAL_ERROR"
            database_error:
              summary: Database error
              value:
                error: "Failed to create session"
                details: "Unable to create a new therapy session. Please try again."
                code: "SESSION_CREATE_ERROR"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (currently only used for Groq API)

tags:
  - name: Chat
    description: Real-time chat operations with AI therapist
  - name: Sessions
    description: Session management for conversation continuity
  - name: Messages
    description: Message storage and retrieval
  - name: Reports
    description: Therapeutic report generation and delivery
  - name: Models
    description: AI model information and configuration
  - name: Environment
    description: Environment configuration and status